{"version":3,"sources":["stored_state.js","Forms.js","api/toggl_report.js","Graph.js","App.js","serviceWorker.js","index.js"],"names":["fullKeyFor","prefix","key","getStoredState","defaultValue","storedValue","localStorage","getItem","JSON","parse","createGetStoredState","storeState","value","setItem","stringify","createStoreState","SAVED_KEYS","Forms","props","state","token","workspaceId","projectId","hours","period","settingsOpen","this","emitOnUpdate","data","setState","Object","keys","filter","it","includes","forEach","onUpdate","months","Array","from","length","_","i","toString","className","htmlFor","onChange","event","setFormState","target","map","offset","format","subMonths","Date","parseInt","type","onClick","id","min","React","Component","reportToBurndown","getAllEntries","currentPage","params","queryString","URLSearchParams","page","window","fetch","method","headers","then","response","json","responseData","per_page","total_count","otherEntries","concat","dateInMonth","getDateInMonth","since","startOfMonth","until","endOfMonth","convertPeriod","workspace_id","project_ids","user_agent","convertToParams","entries","goalInSeconds","totalExecutedSeconds","entry","dur","reduce","a","b","dailyGoalSeconds","Math","round","getDaysInMonth","day","isWeekend","getFullYear","getMonth","businessDaysInMonth","dailyData","monthDateArray","date","goal","executed","isSameDay","start","e","graphData","index","idealSlope","slice","d","executedSlope","Authorization","btoa","Graph","tooltipOpen","tooltipX","tooltipY","tooltipDate","tooltipExecuted","tooltipSubtotal","tooltipIdeal","goalHours","currentDayIndex","findIndex","unit","maxGraphSlice","style","flex","display","flexDirection","hms","idealPercent","executedPercent","padding","height","alignItems","background","title","fontWeight","width","version","viewBox","hour","strokeWidth","fill","stroke","color","x","y","fontSize","join","onMouseOver","showTooltip","onMouseLeave","hideTooltip","cx","cy","r","textAnchor","visibility","left","top","tooltipDimensions","document","querySelector","getBoundingClientRect","bodyDimensions","body","currentTarget","right","bottom","totalHours","seconds","floor","string","substr","repeat","App","graphLoading","console","log","loadGraph","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.32e87bf8.chunk.js","sourcesContent":["const fullKeyFor = (prefix, key) => `hours.${prefix}.${key}`;\n\nfunction createGetStoredState(prefix) {\n  return (key, defaultValue) => {\n    const storedValue = localStorage.getItem(fullKeyFor(prefix, key));\n    if (storedValue) {\n      return JSON.parse(storedValue);\n    }\n    return defaultValue;\n  };\n}\n\nfunction createStoreState(prefix) {\n  return (key, value) => {\n    localStorage.setItem(fullKeyFor(prefix, key), JSON.stringify(value));\n    return value;\n  };\n}\n\nexport default function storedState(prefix) {\n  const getStoredState = createGetStoredState(prefix);\n  const storeState = createStoreState(prefix);\n  return { getStoredState, storeState };\n}\n","import React from 'react';\nimport storedState from './stored_state';\nimport './Forms.css';\nimport { format, subMonths } from 'date-fns';\n\nconst { getStoredState, storeState } = storedState('Forms');\n\nconst SAVED_KEYS = ['token', 'workspaceId', 'projectId', 'hours'];\n\nexport default class Forms extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: getStoredState('token', ''),\n      workspaceId: getStoredState('workspaceId', ''),\n      projectId: getStoredState('projectId', ''),\n      hours: getStoredState('hours', 34),\n      period: '0',\n      settingsOpen: false\n    };\n  }\n\n  componentDidMount() {\n    this.emitOnUpdate(this.state);\n  }\n\n  setFormState(data) {\n    this.setState(state => {\n      Object.keys(data).filter(it => SAVED_KEYS.includes(it)).forEach(key => storeState(key, data[key]));\n      this.emitOnUpdate({...state, ...data});\n      return data;\n    });\n  }\n\n  emitOnUpdate(state) {\n    const { token, workspaceId, projectId, hours, period } = state;\n    this.props.onUpdate({ token, workspaceId, projectId, hours, period });\n  }\n\n  render() {\n    const months = Array.from({ length: 13 }, (_, i) => (12 - i).toString());\n    const { token, workspaceId, projectId, hours, period, settingsOpen } = this.state;\n    return (\n      <div className=\"Forms m-3\">\n        <div className=\"form-group\">\n          <label htmlFor=\"form_period\">Período</label>\n          <select className=\"custom-select\" value={period} onChange={event => this.setFormState({period: event.target.value})}>\n            {months.map(offset => (\n              <option value={offset} key={offset}>{format(subMonths(new Date(), parseInt(offset, 10)), 'MMMM yyyy')}</option>\n            ))}\n          </select>\n        </div>\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <h2 className=\"mb-0\">\n              <button className=\"btn btn-link\" type=\"button\" onClick={() => this.setState({settingsOpen: !settingsOpen})}>\n                Opções\n              </button>\n            </h2>\n          </div>\n          <div className={`collapse ${settingsOpen ? 'show' : ''}`}>\n            <div className=\"card-body\">\n              <div className=\"form-group\">\n                <label htmlFor=\"form_hours\">Horas</label>\n                <input className=\"form-control\" id=\"form_hours\" type=\"number\" min={1} value={hours} onChange={event => this.setFormState({hours: event.target.value})} />\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"form_token\">Token</label>\n                <input className=\"form-control\" id=\"form_token\" type=\"text\" value={token} onChange={event => this.setFormState({token: event.target.value})} />\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"form_workspace\">Workspace ID</label>\n                <input className=\"form-control\" id=\"form_workspace\" type=\"text\" value={workspaceId} onChange={event => this.setFormState({workspaceId: event.target.value})} />\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"form_project\">Project ID</label>\n                <input className=\"form-control\" id=\"form_project\" type=\"text\" value={projectId} onChange={event => this.setFormState({projectId: event.target.value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import { format, startOfMonth, endOfMonth, subMonths, getDaysInMonth, isWeekend, isSameDay } from 'date-fns';\n\nfunction businessDaysInMonth(dateInMonth) {\n  return Array.from({ length: getDaysInMonth(dateInMonth) }, (_, i) => i + 1)\n    .filter(day => !isWeekend(new Date(dateInMonth.getFullYear(), dateInMonth.getMonth(), day)))\n    .length;\n}\n\nfunction monthDateArray(dateInMonth) {\n  return Array.from({ length: getDaysInMonth(dateInMonth) }, (_, i) => (\n    new Date(dateInMonth.getFullYear(), dateInMonth.getMonth(), i + 1)\n  ));\n}\n\nexport function reportToBurndown({ token, workspaceId, projectId, hours, period }) {\n  return getAllEntries(1, token, convertToParams({ workspaceId, projectId, period })).then(entries => {\n    const goalInSeconds = (hours * 60 * 60);\n    const totalExecutedSeconds = entries.map(entry => entry.dur / 1000).reduce((a, b) => a + b);\n    const dateInMonth = getDateInMonth(period);\n    const dailyGoalSeconds = Math.round(goalInSeconds / businessDaysInMonth(dateInMonth));\n    const dailyData = monthDateArray(dateInMonth).map(date => {\n      return {\n        date,\n        goal: isWeekend(date) ? 0 : dailyGoalSeconds,\n        executed: entries.filter(entry => isSameDay(date, new Date(entry.start))).map(e => e.dur / 1000).reduce((a, b) => a + b, 0)\n      }\n    });\n    const graphData = dailyData.map((data, index) => {\n      return {\n        ...data,\n        idealSlope: dailyData.slice(0, index + 1).map(d => d.goal).reduce((a, b) => a - b, goalInSeconds),\n        executedSlope: dailyData.slice(0, index + 1).map(d => d.executed).reduce((a, b) => a - b, goalInSeconds),\n      }\n    });\n    return {\n      goalInSeconds,\n      totalExecutedSeconds,\n      dateInMonth,\n      dailyGoalSeconds,\n      dailyData,\n      graphData\n    }\n  });\n}\n\nfunction getAllEntries(currentPage, token, params) {\n  const queryString = new URLSearchParams({ ...params, page: currentPage }).toString();\n  return window.fetch(\n    `https://toggl.com/reports/api/v2/details?${queryString}`,\n    { method: 'GET', headers: headers(token) })\n    .then(response => response.json()).then(responseData => {\n      const totalObtained = ((currentPage - 1) * responseData.per_page) + responseData.data.length;\n      if (totalObtained < responseData.total_count) {\n        return getAllEntries(currentPage + 1, token, params).then(otherEntries => {\n          return responseData.data.concat(otherEntries);\n        });\n      }\n      return responseData.data;\n    });\n}\n\nconst headers = token => ({ Authorization: `Basic ${btoa(`${token}:api_token`)}` });\n\nfunction convertToParams({ workspaceId, projectId, period }) {\n  const { since, until } = convertPeriod(period);\n  return {\n    since,\n    until,\n    workspace_id: workspaceId,\n    project_ids: projectId,\n    user_agent: 'kkd-hrs'\n  };\n}\n\nfunction getDateInMonth(period) {\n  return subMonths(new Date(), parseInt(period, 10));\n}\n\nfunction convertPeriod(period) {\n  const dateInMonth = getDateInMonth(period);\n  const formatPattern = 'yyyy-MM-dd';\n  return {\n    since: format(startOfMonth(dateInMonth), formatPattern),\n    until: format(endOfMonth(dateInMonth), formatPattern)\n  }\n}\n","import React, { Component } from 'react';\nimport { isSameMonth, isSameDay, parseISO, format } from 'date-fns';\nimport './Graph.css';\n\nexport default class Graph extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tooltipOpen: false,\n      tooltipX: 0,\n      tooltipY: 0,\n      tooltipDate: new Date(),\n      tooltipExecuted: '',\n      tooltipSubtotal: '',\n      tooltipIdeal: ''\n    };\n  }\n  render() {\n    const {\n      goalInSeconds,\n      totalExecutedSeconds,\n      dateInMonth,\n      dailyGoalSeconds,\n      dailyData,\n      graphData\n    } = this.props.graphData;\n\n    const goalHours = goalInSeconds / 3600;\n    const currentDayIndex = graphData.findIndex(data => isSameDay(new Date(), data.date));\n    const unit = 70 / graphData.length;\n    const maxGraphSlice = currentDayIndex === -1 ? graphData.length : (currentDayIndex + 1);\n\n    return (\n      <div style={{ flex: '1', display: 'flex', flexDirection: 'column' }}>\n        <div className=\"m-1\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">{format(dateInMonth, 'MMMM yyyy')}</h5>\n              <ul>\n                <li>\n                  <strong>Goal: </strong> {hms(goalInSeconds)}\n                </li>\n                <li>\n                  <strong>Executed: </strong> {hms(totalExecutedSeconds)}\n                </li>\n                <li>\n                  <strong>Daily goal: </strong> {hms(dailyGoalSeconds)}\n                </li>\n                {currentDayIndex !== -1 && (\n                  <li>\n                    <strong>Distance from daily goal: </strong> {hms(graphData[currentDayIndex].executedSlope - graphData[currentDayIndex].idealSlope)}\n                  </li>\n                )}\n              </ul>\n            </div>\n          </div>\n        </div>\n        <div style={{ flex: '1', display: 'none' }}>\n          {graphData.map(({ date, goal, executed, idealSlope, executedSlope }, index) => {\n            const idealPercent = idealSlope / goalInSeconds;\n            const executedPercent = executedSlope / goalInSeconds;\n            return (\n              <div key={index}\n                style={{ padding: '3px', height: '100%', display: 'flex', flex: '1', flexDirection: 'column' }}>\n                <div style={{ flex: '1', display: 'flex', alignItems: 'flex-end' }}>\n                  <div style={{ background: '#f00', flex: '1', height: `${idealPercent * 100}%` }}\n                    title={`Ideal: ${hms(idealSlope)} remaining`} />\n                  <div style={{ background: '#0f0', flex: '1', height: `${executedPercent * 100}%` }}\n                    title={`Executed: ${hms(executedSlope)} remaining`} />\n                </div>\n                <div style={{ height: '30px', fontWeight: index === currentDayIndex ? 'bold' : 'normal' }}>\n                  {index + 1}.\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        <div style={{ flex: '1' }}>\n          <svg style={{ height: '100%', width: '100%' }} version=\"1\" viewBox=\"0 0 70 30\" id=\"graph\">\n            {Array.from({ length: goalHours + 1 }, (_, i) => i).map(hour => (\n              <path\n                strokeWidth={0.1}\n                fill=\"none\"\n                stroke=\"#cccccc\"\n                d={`M 0 ${29 - 28 * (hour / goalHours)} H 70`}\n                key={hour}\n              />\n            ))}\n            {Array.from({ length: goalHours + 1 }, (_, i) => i).map(hour => (\n              <text\n                color=\"#cccccc\"\n                x={0}\n                y={29.6 - 28 * (hour / goalHours)}\n                key={hour}\n                fontSize={0.5}\n              >\n                {hour}\n              </text>\n            ))}\n            <path\n              className=\"ideal\"\n              d={graphData.map(({ idealSlope }, i) => (\n                `${i === 0 ? 'M' : 'L'} ${unit * i + unit / 2} ${29 - (idealSlope / goalInSeconds) * 28}`\n              )).join(' ')}\n            />\n            {graphData.map(({ idealSlope }, i) => (\n              <circle\n                onMouseOver={event => this.showTooltip(event, i)}\n                onMouseLeave={() => this.hideTooltip()}\n                cx={unit * i + unit / 2}\n                cy={29 - (idealSlope / goalInSeconds) * 28}\n                r={0.2}\n                className=\"ideal\"\n                key={i}\n              />\n            ))}\n            <path className=\"executed\" d={graphData.slice(0, maxGraphSlice).map(({ executedSlope }, i) => (\n              `${i === 0 ? 'M' : 'L'} ${unit * i + unit / 2} ${29 - (executedSlope / goalInSeconds) * 28}`\n            )).join(' ')} />\n            {graphData.slice(0, maxGraphSlice).map(({ executedSlope }, i) => (\n              <circle\n                onMouseOver={event => this.showTooltip(event, i)}\n                onMouseLeave={() => this.hideTooltip()}\n                cx={unit * i + unit / 2}\n                cy={29 - (executedSlope / goalInSeconds) * 28}\n                r={0.2}\n                className=\"executed\"\n                key={i}\n              />\n            ))}\n            {Array.from({ length: graphData.length }, (_, i) => i).map(day => (\n              <text textAnchor=\"end\" x={unit * day + unit / 2} y={30} key={day} fontSize={0.8}>{day + 1}.</text>\n            ))}\n          </svg>\n          <div id=\"tooltip\" style={{\n            visibility: this.state.tooltipOpen ? 'visible' : 'hidden',\n            left: this.state.tooltipX,\n            top: this.state.tooltipY\n          }}>\n            <p><strong>{format(this.state.tooltipDate, 'dd/MM/yyyy')}</strong></p>\n            <p>Executed: {this.state.tooltipExecuted}</p>\n            <p>Subtotal: {this.state.tooltipSubtotal}</p>\n            <p>Ideal: {this.state.tooltipIdeal}</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  showTooltip(event, index) {\n    const tooltipDimensions = document.querySelector('#tooltip').getBoundingClientRect();\n    const bodyDimensions = document.body.getBoundingClientRect();\n    const { left, height, right, top } = event.currentTarget.getBoundingClientRect();\n    let tooltipX = right + 20;\n    if (tooltipX + tooltipDimensions.width > bodyDimensions.right) {\n      tooltipX = left - 20 - tooltipDimensions.width;\n    }\n    let tooltipY = top + height / 2 - tooltipDimensions.height / 2;\n    if (tooltipY + tooltipDimensions.height > bodyDimensions.bottom) {\n      tooltipY = bodyDimensions.bottom - tooltipDimensions.height - 5;\n    }\n    const data = this.props.graphData.graphData[index];\n    const totalHours = this.props.graphData.goalInSeconds;\n    this.setState({\n      tooltipX,\n      tooltipY,\n      tooltipOpen: true,\n      tooltipDate: data.date,\n      tooltipExecuted: hms(data.executed),\n      tooltipSubtotal: hms(totalHours - data.executedSlope),\n      tooltipIdeal: hms(totalHours - data.idealSlope)\n    });\n  }\n\n  hideTooltip() {\n    this.setState({ tooltipOpen: false });\n  }\n}\n\nfunction hms(seconds) {\n  seconds = Math.floor(seconds);\n  return [Math.floor(seconds / 3600), Math.floor(seconds / 60) % 60, seconds % 60].map(i => rjust(`${i}`, 2, '0')).join(':')\n}\n\nfunction rjust(string, width, padding) {\n  padding = padding || ' ';\n  padding = padding.substr(0, 1);\n  if (string.length < width)\n    return padding.repeat(width - string.length) + string;\n  else\n    return string;\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Forms from './Forms';\nimport { reportToBurndown } from './api/toggl_report';\nimport Graph from './Graph';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      graphLoading: false,\n      graphData: null\n    };\n  }\n\n  loadGraph(data) {\n    this.setState({ graphLoading: true });\n    reportToBurndown(data).then(graphData => {\n      console.log(graphData);\n      this.setState({ graphLoading: false, graphData });\n    });\n  }\n\n  render() {\n    const { graphLoading, graphData } = this.state;\n    return (\n      <div className=\"App\">\n        <Forms onUpdate={data => this.loadGraph(data)} />\n        {!graphLoading && graphData && <Graph graphData={graphData} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}